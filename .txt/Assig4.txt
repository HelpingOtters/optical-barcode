/************************************************************
 * Module 4 Assignment 
 * 
 * @author Lindsey Reynolds
 * @author Max Halbert
 * @author Dan Sedano 
 * @author Ricardo Barbosa 
 * 
 * @version November 19, 2019
 * 
 * Description: Optical scanning and pattern recognition using
 *              2D arrays and interfaces to read and write an
 *              optical barcode     
 *************************************************************/
public class Assig4 
{

   public static void main(String[] args)
   {
      String[] sImageIn =
      {
         "                                               ",
         "                                               ",
         "                                               ",
         "     * * * * * * * * * * * * * * * * * * * * * ",
         "     *                                       * ",
         "     ****** **** ****** ******* ** *** *****   ",
         "     *     *    ****************************** ",
         "     * **    * *        **  *    * * *   *     ",
         "     *   *    *  *****    *   * *   *  **  *** ",
         "     *  **     * *** **   **  *    **  ***  *  ",
         "     ***  * **   **  *   ****    *  *  ** * ** ",
         "     *****  ***  *  * *   ** ** **  *   * *    ",
         "     ***************************************** ",  
         "                                               ",
         "                                               ",
         "                                               "

      };      

      String[] sImageIn_2 =
      {
         "                                          ",
         "                                          ",
         "* * * * * * * * * * * * * * * * * * *     ",
         "*                                    *    ",
         "**** *** **   ***** ****   *********      ",
         "* ************ ************ **********    ",
         "** *      *    *  * * *         * *       ",
         "***   *  *           * **    *      **    ",
         "* ** * *  *   * * * **  *   ***   ***     ",
         "* *           **    *****  *   **   **    ",
         "****  *  * *  * **  ** *   ** *  * *      ",
         "**************************************    ",
         "                                          ",
         "                                          ",
         "                                          ",
         "                                          "

      };

      BarcodeImage bc = new BarcodeImage(sImageIn);
      bc.displayToConsole();

      DataMatrix dm = new DataMatrix(bc);

      // First secret message
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // Second secret message
      bc = new BarcodeImage(sImageIn_2);
      dm.scan(bc);
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // Our own message
      dm.readText("Helping Otters 2019");
      dm.generateImageFromText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

   }
}

/***************************************************
 * Phase 1
 * BarcodeIO.java
 ***************************************************/
interface BarcodeIO
{
   //stores a copy of the image 
   public boolean scan(BarcodeImage bc);

   //stores a string to be encoded into BarcodeImage
   public boolean readText(String text);

   //analyzes internal text to be encoded into BarcodeImage
   public boolean generateImageFromText();

   //analyzes internal BarcodeImage to decode to text 
   public boolean translateImageToText();

   //prints string to console
   public void displayTextToConsole();

   //prints dot matrix to the console
   public void displayImageToConsole();

}



/**************************************************
 * Phase 2
 * Barcode.java 
 * @author Max Halbert
 * Description: Class to represent the barcode image that will
 * be used in DataMatrix
 * ************************************************/
class BarcodeImage implements Cloneable
{
   public static final int MAX_HEIGHT = 30; // maximum number of rows
   public static final int MAX_WIDTH = 65; // maximum number of columns

   private boolean[][] imageData; // 2D array to store data of a barcode image

   /**
    * Default constructor that creates an array with blank image data
    */
   public BarcodeImage()
   {
      imageData = new boolean[MAX_HEIGHT][MAX_WIDTH];
      initImageData();
   }

   /**
    * Constructor that takes an array of type String which contains image data 
    * and then converts and stores them in the 2D array
    * @param strData array of String that contain image data
    */
   public BarcodeImage(String[] strData)
   {
      // create and initialize the 2D array, so its ready for the image
      imageData = new boolean[MAX_HEIGHT][MAX_WIDTH];
      initImageData();

      if (!checkSize(strData))
      {
         // the input image data is too big for the 2D array to hold
         System.exit(0);
      }

      // string data starts from the last string and imageData starts from last
      // row
      // loop until the first string is taken care of
      for (int row = MAX_HEIGHT - 1, s = strData.length - 1; s >= 0; row--, s--)
      {
         // starts from the left then to the right in the string and the array
         for (int col = 0, chCtr = 0; chCtr < strData[s].length(); 
            col++, chCtr++)
         {
            if (strData[s].charAt(chCtr) == '*')
            {
               // '*' means black in the image and will be stored as true value
               imageData[row][col] = true;
            }
            else
            {
               // space means white in the image and will be stored as false
               // value
               imageData[row][col] = false;
            }
         }
      }

   }

   /**
    * Check if the data String array can fit into the imageData 2D array
    * @param data the array of strings containing the image data
    * @return true if the size of data fits into the 2D array
    * @return false if the size is too big or if data is null
    */
   private boolean checkSize(String[] data)
   {
      if (data == null)
      {
         return false; // data is null
      }
      if (data.length <= MAX_HEIGHT)
      {
         for (int s = 0; s < data.length; s++)
         {
            if (data[s].length() > MAX_WIDTH)
            {
               return false;
            }
         }
         return true; // it fits
      }
      return false; // too big
   }

   /**
    * Helper method to initialize imageData with false values, which means a 
    * white background
    */
   private void initImageData()
   {
      for (int row = 0; row < MAX_HEIGHT; row++)
      {
         for (int col = 0; col < MAX_WIDTH; col++)
         {
            imageData[row][col] = false;
         }
      }
   }

   /**
    * Accessor for a specific pixel value in imageData
    * @param row in imageData
    * @param col in imageData
    * @return boolean 
    */
   public boolean getPixel(int row, int col)
   {
      if (row < MAX_HEIGHT && col < MAX_WIDTH)
      {
         return imageData[row][col];
      }
      return false;
   }

   /**
    * Method to change the value of a pixel in imageData
    * @param row in imageData
    * @param col in imageData
    * @param value the boolean value to be set in the pixel
    * @return boolean stating if it was successfully changed 
    */
   public boolean setPixel(int row, int col, boolean value)
   {
      if (row < MAX_HEIGHT && col < MAX_WIDTH)
      {
         // within bound
         imageData[row][col] = value;
         return true;
      }
      return false; // out of bound
   }

   /**
    * Override of the Object.clone() method and creates a deep copy of a 
    * BarcodeImage Object
    * @return BarcodeImage a copy of the current object
    */
   @Override
   public BarcodeImage clone() throws CloneNotSupportedException
   {
      BarcodeImage copy = (BarcodeImage)super.clone();

      // loop through the array, copying values
      for(int row = 0; row < MAX_HEIGHT; row++)
      {
         for(int col = 0; col < MAX_WIDTH; col++)
         {
            copy.setPixel(row, col, this.getPixel(row, col));
         }
      }     
      return copy;
   }

   /**
    * This is for testing purposes to display the data in the imageData
    */
   public void displayToConsole()
   {
      for (int col = 0; col < MAX_WIDTH + 2; col++)
      {
         System.out.print('-');
      }
      System.out.println();
      for (int row = 0; row < MAX_HEIGHT; row++)
      {
         System.out.print('|');
         for (int col = 0; col < MAX_WIDTH; col++)
         {
            if (imageData[row][col])
            {
               System.out.print('*');
            }
            else
            {
               System.out.print(' ');
            }
         }
         System.out.print("|\n");
      }
      for (int col = 0; col < MAX_WIDTH + 2; col++)
      {
         System.out.print('-');
      }
      System.out.println();
   }
}

/*********************************************************
 * Phase 3
 * DataMatrix.java
 * Description: Class to hold both a barcode image and the text
 * that corresponds to it
 *********************************************************/
class DataMatrix implements BarcodeIO
{
   public static final char BLACK_CHAR = '*';
   public static final char WHITE_CHAR = ' ';  

   private BarcodeImage image;
   private String text;
   private int actualWidth; 
   private int actualHeight; 


   /**
    *  Default constructor that takes no arguments and creates a blank image 
    *  and an empty text
    */ 
   public DataMatrix()
   {
      // Create empty default member variables 
      image = new BarcodeImage();
      text = "";
      actualWidth = 0;
      actualHeight = 0;
   }

   /**
    * Constructor that takes a BarcodeImage object as an argument
    * @param image
    */
   public DataMatrix(BarcodeImage image) 
   {
      if(image == null){
         return;
      }
      scan(image); // read in the image
      text = "";
   }

   /**
    * Constructor that takes in a text String
    * @param text
    */
   public DataMatrix(String text) 
   {
      image = new BarcodeImage();
      actualWidth = 0;
      actualHeight = 0;
      readText(text); // read in the text
   }

   /**
    * Method to read in a text String
    * @param text 
    */
   public boolean readText(String text) 
   {
      if(text == null || text.length() > BarcodeImage.MAX_HEIGHT)
         return false;

      this.text = text;
      return true;
   }

   /**
    * Method to read in the image, make a copy of it and clean it up
    * @param image
    * @return 
    */
   public boolean scan(BarcodeImage image) 
   {
      try {
         this.image = image.clone();
         cleanImage();
         actualWidth = computeSignalWidth(); 
         actualHeight = computeSignalHeight(); 
         return true;
      } catch (CloneNotSupportedException e) {
         return false;
      }
   }

   /**
    * Accessor for actualWidth
    */ 
   public int getActualWidth()
   {
      return actualWidth;
   }

   /**
    * Accessor for actualHeight
    */ 
   public int getActualHeight()
   {
      return actualHeight;
   }

   /**
    * creates a barcode image from a String value 
    * @return boolean 
    */
   public boolean generateImageFromText() 
   {
      image = new BarcodeImage();

      int textLength = text.length();

      //adds 2 to the width for border 
      actualWidth = textLength + 2;

      //8 rows in the image plus the border width
      actualHeight = 10;

      //initial image creation 
      for (int i = 0; i < textLength; i++) 
      {
         int charWrite = (int) text.charAt(i);
         writeCharToCol(i, charWrite);
      }
      //adjusts image: vertical and horizontal 
      addImageBorder();

      return true;

   }

   /**
    * helper method to generateImageFromText()
    * adjusts image vertically and horizontally
    * @return boolean
    */
   private boolean addImageBorder()
   {
      //image adjustment to lower left corner 
      int leftCorner = BarcodeImage.MAX_HEIGHT - actualHeight;

      //adjusting the horizontal borders
      for (int x = 1; x < actualWidth - 1; x++)
      {
         image.setPixel( BarcodeImage.MAX_HEIGHT - 1, x, true); 
         if(x % 2 == 0)
         {
            image.setPixel(leftCorner, x, true); 
         }
      }
      //adjusting the vertical borders 
      for (int y = BarcodeImage.MAX_HEIGHT - 1; y >= leftCorner; --y)
      {
         image.setPixel(y, 0, true);
      }
      return true;
   }

   /**
    * reads barcode image and and translates to String value
    * @return boolean
    */
   public boolean translateImageToText()  
   {
      //loops readCharFromCol() method to read characters   
      text = "";
      for(int i = 1 ; i < actualWidth - 1; i++) 
      {
         text += (readCharFromCol(i));
      }

      return false;
   }

   /**
    * helper method for translateImageToText()
    * @return binary value 
    */ 
   private char readCharFromCol(int col) 
   {
      //adjusts value for new barcode lower left location
      int leftCorner = BarcodeImage.MAX_HEIGHT - actualHeight;

      int total = 0;
      for (int y = BarcodeImage.MAX_HEIGHT - 1; y > leftCorner; y--)
      {
         if(image.getPixel(y, col))
         {
            total += Math.pow(2, BarcodeImage.MAX_HEIGHT - (y + 2));
         }

      }
      return (char) total;
   }

   /**
    * helper method for generateImageFromText()
    * @param col
    * @param code
    * @return boolean
    */
   private boolean writeCharToCol(int col, int code)
   {
      //break apart the message into binary using repeated subtraction
      int row;
      int binaryDecomp = 128;
      while (code > 0)
      {
         if(code - binaryDecomp >= 0)
         {
            //use log on msg to calculate the row number
            row = (BarcodeImage.MAX_HEIGHT - 2) - (int)(Math.log(code) / Math.log(2));
            image.setPixel(row, col + 1, true);
            code -= binaryDecomp;

         }
         binaryDecomp /= 2;
      }
      return true;
   }
   
   /**
    * Method to display the text field
    */
   public void displayTextToConsole() 
   {
      // prints out the text string to the console.
      System.out.println(this.text);
   }

   /**
    * Prints image to the console
    */
   public void displayImageToConsole() 
   {
      int leftCorner = BarcodeImage.MAX_HEIGHT - this.actualHeight;
      for (int y = leftCorner; y < BarcodeImage.MAX_HEIGHT; y++)
      {
         for (int x = 0; x < this.actualWidth; x++)
         {
            if (this.image.getPixel(y, x)) 
            {
               System.out.print(BLACK_CHAR);
            }
            else
            {
               System.out.print(WHITE_CHAR);
            }
         }
         System.out.println();
      }
      System.out.println();
   }


   /**
    * Computes the width of the signal assuming it's already been shifted to
    * the lower left corner
    * @return The width of the signal.
    */
   private int computeSignalWidth() 
   {
      int counter = 0;
      for(int col = 0; col < BarcodeImage.MAX_WIDTH; col++)
      {
         if(image.getPixel(BarcodeImage.MAX_HEIGHT - 1, col))
            counter++;
      }
      return counter; 
   }
   /*
    * Computes the height of the signal assuming it's already been shifted
    * to the lower left corner.
    * @return The height of the signal
    */
   private int computeSignalHeight() 
   {
      int counter = 0;
      int firstCol = 0;
      for(int row = 0; row < BarcodeImage.MAX_HEIGHT; row++)
         if(image.getPixel(row,firstCol))
            counter++;
      return counter;  
   }

   /**
    * Method to move image into the bottom left corner
    */
   private void cleanImage() 
   {
      moveImageToLowerLeft();
   }

   /**
    *  Method to help with manipulation in cleanImage()
    */
   private void moveImageToLowerLeft()
   {
      int downOffset = countBlankRows();
      if(downOffset != 0)
         shiftImageDown(countBlankRows());

      int leftOffset = countBlankColumns();
      if(leftOffset != 0)
         shiftImageLeft(countBlankColumns());
   } 
   /**
    * Counts the number of blank rows from the bottom
    * @return int count of blank rows from the bottom.
    */
   private int countBlankRows()
   {
      boolean blankRow = false;
      int countRow = 0;
      for(int row = BarcodeImage.MAX_HEIGHT - 1; row >= 0; row--)
      {
         for(int col = 0; col < BarcodeImage.MAX_WIDTH; col++)
         {
            if(!image.getPixel(row,col))
               blankRow = true;
            if(image.getPixel(row,col))
            {
               blankRow = false;
               return countRow;
            }            
         }
         if(blankRow)
            countRow++;
      }   
      return countRow;
   }

   /**
    * Counts the number of blank columns from the left.
    * @return int count of blank columns from the left.
    */
   private int countBlankColumns()
   {
      boolean blankCol = false;
      int countCol = 0;
      for(int col = 0; col < BarcodeImage.MAX_WIDTH; col++)
      {
         for(int row = 0; row < BarcodeImage.MAX_HEIGHT; row++)
         {
            if(!image.getPixel(row,col))
               blankCol = true;
            if(image.getPixel(row,col))
            {
               blankCol = false;
               return countCol;
            }            
         }
         if(blankCol)
            countCol++;
      }   
      return countCol;
   }

   /**
    * Shift the array to the left most column
    * @param offset
    */
   private void shiftImageDown(int offset)
   {
      int lastRow = BarcodeImage.MAX_HEIGHT - 1;
      int shiftBy = lastRow - offset;

      for(int row = lastRow; row >= 0; row--)
      {
         for(int col = 0; col < BarcodeImage.MAX_WIDTH; col++)
         {
            image.setPixel(row, col, image.getPixel(shiftBy,col));
            image.setPixel(shiftBy,col,false);
         }
         shiftBy--;
         if(shiftBy == 0)
            break;
      }
   }
   /**
    * Shifts the Array the bottom most row.
    * @param offset
    */
   private void shiftImageLeft(int offset)
   {
      for(int col = 0; col < BarcodeImage.MAX_WIDTH; col++,offset++)
      {
         for(int row = 0; row < BarcodeImage.MAX_HEIGHT; row++)
         {
            image.setPixel(row,col,image.getPixel(row,offset));
            image.setPixel(row,offset,false);
         }
      }
   }

}


/**********************************OUTPUT***********************************

-------------------------------------------------------------------
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|                                                                 |
|     * * * * * * * * * * * * * * * * * * * * *                   |
|     *                                       *                   |
|     ****** **** ****** ******* ** *** *****                     |
|     *     *    ******************************                   |
|     * **    * *        **  *    * * *   *                       |
|     *   *    *  *****    *   * *   *  **  ***                   |
|     *  **     * *** **   **  *    **  ***  *                    |
|     ***  * **   **  *   ****    *  *  ** * **                   |
|     *****  ***  *  * *   ** ** **  *   * *                      |
|     *****************************************                   |
|                                                                 |
|                                                                 |
|                                                                 |
-------------------------------------------------------------------
CSUMB CSIT online program is top notch.
* * * * * * * * * * * * * * * * * * * * *
*                                       *
****** **** ****** ******* ** *** *****  
*     *    ******************************
* **    * *        **  *    * * *   *    
*   *    *  *****    *   * *   *  **  ***
*  **     * *** **   **  *    **  ***  * 
***  * **   **  *   ****    *  *  ** * **
*****  ***  *  * *   ** ** **  *   * *   
*****************************************

You did it!  Great work.  Celebrate.
* * * * * * * * * * * * * * * * * * * 
*                                    *
**** *** **   ***** ****   *********  
* ************ ************ **********
** *      *    *  * * *         * *   
***   *  *           * **    *      **
* ** * *  *   * * * **  *   ***   *** 
* *           **    *****  *   **   **
****  *  * *  * **  ** *   ** *  * *  
**************************************

Helping Otters 2019
* * * * * * * * * *  
*                    
******** ******      
* ******* ********** 
*   *     ** ** **** 
** * **  *         * 
* **  ** ****        
*     ** *   ** *    
* *  * * *  * *   ** 
******************** 

******************************************************************************/